openapi: 3.0.0
info:
  title: Library Management
  description: This a library management API
  license:
    name: Apache 2.0
    url: http://www.apache.org/licenses/LICENSE-2.0.html
  version: 1.0.0
servers:
- url: https://virtserver.swaggerhub.com/hei.kenny.30904/Library_Management/1.0.0
  description: SwaggerHub API Auto Mocking
- url: https://library_management.swagger.io/
tags:
- name: book
  description: Everything about books we have
  externalDocs:
    description: Don't know what a book is?
    url: https://en.wikipedia.org/wiki/Book
- name: author
  description: here lay information about books author
paths:
  /books:
    get:
      tags:
      - book
      summary: Get books based on query parameters
      operationId: getBooks
      parameters:
      - name: beginningDate
        in: query
        description: The start date of the release range
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
          example: 2022-06-01
      - name: endDate
        in: query
        description: The end date of the release range (
        required: false
        style: form
        explode: true
        schema:
          type: string
          format: date
          example: 2022-07-01
      - name: bookName
        in: query
        description: The name of the book we are looking for
        required: false
        style: form
        explode: true
        schema:
          type: string
          example: book name
      responses:
        "200":
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/inline_response_200'
        "404":
          description: No books found matching the query parameters
    put:
      tags:
      - book
      summary: Update an existing book
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "200":
          description: Book updated successfully
    post:
      tags:
      - book
      summary: Add a new book
      operationId: addBook
      requestBody:
        description: Book object that needs to be added
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Book'
        required: true
      responses:
        "200":
          description: Successfully added
        "405":
          description: Invalid input
    delete:
      tags:
      - book
      summary: Delete a book by ID
      parameters:
      - name: id
        in: query
        description: ID of the book to delete
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "204":
          description: Book deleted successfully
  /authors:
    get:
      tags:
      - author
      summary: Get a list of authors
      parameters:
      - name: authorName
        in: query
        description: Filter by author name
        required: false
        style: form
        explode: true
        schema:
          type: string
      responses:
        "200":
          description: A list of authors
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Author'
    put:
      tags:
      - author
      summary: Update an existing author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        "200":
          description: Author updated successfully
    post:
      tags:
      - author
      summary: Add a new author
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Author'
        required: true
      responses:
        "201":
          description: Author created successfully
    delete:
      tags:
      - author
      summary: Delete an author by ID
      parameters:
      - name: id
        in: query
        description: ID of the author to delete
        required: true
        style: form
        explode: true
        schema:
          type: integer
      responses:
        "204":
          description: Author deleted successfully
components:
  schemas:
    Book:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the book
        bookName:
          type: string
          description: The name of the book
        author:
          type: string
          description: The name of the author (text in v1.0.0)
        pageNumbers:
          type: integer
          description: The number of pages in the book
        topic:
          type: string
          description: The topic of the book
          enum:
          - ROMANCE
          - COMEDY
          - OTHER
        releaseDate:
          type: string
          description: The release date of the book
          format: date
    Author:
      type: object
      properties:
        id:
          type: integer
          description: Unique identifier for the author
        name:
          type: string
          description: The name of the author
        sex:
          type: string
          description: The sex of the author
          enum:
          - M
          - F
    inline_response_200:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: Book Name
        releaseDate:
          type: string
          format: date
          example: 2023-03-15
